/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * The cluster resource
 *
 * @extends models['Resource']
 */
class Cluster extends models['Resource'] {
  /**
   * Create a Cluster.
   * @member {array} [availableClusterVersions] The available cluster code
   * version which the cluster can upgrade to, note that you must choose
   * upgradeMode to manual to upgrade to
   * @member {string} [clusterId] The unique identifier for the cluster
   * resource
   * @member {string} [clusterState] The state for the cluster. Possible values
   * include: 'WaitingForNodes', 'Deploying', 'BaselineUpgrade',
   * 'UpdatingUserConfiguration', 'UpdatingUserCertificate',
   * 'UpdatingInfrastructure', 'EnforcingClusterVersion',
   * 'UpgradeServiceUnreachable', 'AutoScale', 'Ready'
   * @member {string} [clusterEndpoint] The endpoint for the cluster connecting
   * to servicefabric resource provider
   * @member {string} [clusterCodeVersion] The ServiceFabric code version
   * running in your cluster
   * @member {object} [certificate] This primay certificate will be used as
   * cluster node to node security, SSL certificate for cluster management
   * endpoint and default admin client
   * @member {string} [certificate.thumbprint] Thumbprint of the primary
   * certificate
   * @member {string} [certificate.thumbprintSecondary] Thumbprint of the
   * secondary certificate
   * @member {string} [certificate.x509StoreName] The local certificate store
   * location. Possible values include: 'AddressBook', 'AuthRoot',
   * 'CertificateAuthority', 'Disallowed', 'My', 'Root', 'TrustedPeople',
   * 'TrustedPublisher'
   * @member {string} [reliabilityLevel] Cluster reliability level indicates
   * replica set size of system service. Possible values include: 'Bronze',
   * 'Silver', 'Gold', 'Platinum'
   * @member {string} [upgradeMode] Cluster upgrade mode indicates if fabric
   * upgrade is initiated automatically by the system or not. Possible values
   * include: 'Automatic', 'Manual'
   * @member {array} [clientCertificateThumbprints] The client thumbprint
   * details ,it is used for client access for cluster operation
   * @member {array} [clientCertificateCommonNames] List of client certificates
   * to whitelist based on common names
   * @member {array} [fabricSettings] List of custom fabric settings to
   * configure the cluster.
   * @member {object} [reverseProxyCertificate] The server certificate used by
   * reverse proxy
   * @member {string} [reverseProxyCertificate.thumbprint] Thumbprint of the
   * primary certificate
   * @member {string} [reverseProxyCertificate.thumbprintSecondary] Thumbprint
   * of the secondary certificate
   * @member {string} [reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   * @member {string} managementEndpoint The http management endpoint of the
   * cluster
   * @member {array} nodeTypes The list of nodetypes that make up the cluster
   * @member {object} [azureActiveDirectory] The settings to enable AAD
   * authentication on the cluster
   * @member {string} [azureActiveDirectory.tenantId] Azure active directory
   * tenant id
   * @member {string} [azureActiveDirectory.clusterApplication] Azure active
   * directory cluster application id
   * @member {string} [azureActiveDirectory.clientApplication] Azure active
   * directory client application id
   * @member {string} [provisioningState] The provisioning state of the cluster
   * resource. Possible values include: 'Updating', 'Succeeded', 'Failed',
   * 'Canceled'
   * @member {string} [vmImage] The name of VM image VMSS has been configured
   * with. Generic names such as Windows or Linux can be used.
   * @member {object} [diagnosticsStorageAccountConfig] The storage diagnostics
   * account configuration details
   * @member {string} [diagnosticsStorageAccountConfig.storageAccountName]
   * Diagnostics storage account name
   * @member {string} [diagnosticsStorageAccountConfig.protectedAccountKeyName]
   * Protected Diagnostics storage key name
   * @member {string} [diagnosticsStorageAccountConfig.blobEndpoint]
   * Diagnostics storage account blob endpoint
   * @member {string} [diagnosticsStorageAccountConfig.queueEndpoint]
   * Diagnostics storage account queue endpoint
   * @member {string} [diagnosticsStorageAccountConfig.tableEndpoint]
   * Diagnostics storage account table endpoint
   * @member {object} [upgradeDescription] The policy to use when upgrading the
   * cluster.
   * @member {boolean} [upgradeDescription.overrideUserUpgradePolicy] Use the
   * user defined upgrade policy or not
   * @member {boolean} [upgradeDescription.forceRestart] Force node to restart
   * or not
   * @member {string} [upgradeDescription.upgradeReplicaSetCheckTimeout]
   * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
   * @member {string} [upgradeDescription.healthCheckWaitDuration] The length
   * of time to wait after completing an upgrade domain before performing
   * health checks, it represents .Net TimeSpan
   * @member {string} [upgradeDescription.healthCheckStableDuration] The length
   * of time that health checks must pass continuously,it represents .Net
   * TimeSpan
   * @member {string} [upgradeDescription.healthCheckRetryTimeout] The length
   * of time that health checks can fail continuously,it represents .Net
   * TimeSpan
   * @member {string} [upgradeDescription.upgradeTimeout] The upgrade
   * timeout,it represents .Net TimeSpan
   * @member {string} [upgradeDescription.upgradeDomainTimeout] The timeout for
   * any upgrade domain,it represents .Net TimeSpan
   * @member {object} [upgradeDescription.healthPolicy] Cluster health Policy
   * @member {number}
   * [upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The maximum
   * allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   * @member {number}
   * [upgradeDescription.healthPolicy.maxPercentUnhealthyApplications] The
   * maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this
   * value would be 10.
   * @member {object} [upgradeDescription.deltaHealthPolicy] Delta health
   * policy
   * @member {number}
   * [upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes]
   * Additional unhealthy nodes percentage
   * @member {number}
   * [upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
   * Additional unhealthy nodes percentage per upgrade domain
   * @member {number}
   * [upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications]
   * Additional unhealthy applications percentage
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of Cluster
   *
   * @returns {object} metadata of Cluster
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'Cluster',
      type: {
        name: 'Composite',
        className: 'Cluster',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: true,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          availableClusterVersions: {
            required: false,
            readOnly: true,
            serializedName: 'properties.availableClusterVersions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ClusterVersionDetailsElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClusterVersionDetails'
                  }
              }
            }
          },
          clusterId: {
            required: false,
            readOnly: true,
            serializedName: 'properties.clusterId',
            type: {
              name: 'String'
            }
          },
          clusterState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.clusterState',
            type: {
              name: 'String'
            }
          },
          clusterEndpoint: {
            required: false,
            readOnly: true,
            serializedName: 'properties.clusterEndpoint',
            type: {
              name: 'String'
            }
          },
          clusterCodeVersion: {
            required: false,
            serializedName: 'properties.clusterCodeVersion',
            type: {
              name: 'String'
            }
          },
          certificate: {
            required: false,
            serializedName: 'properties.certificate',
            type: {
              name: 'Composite',
              className: 'CertificateDescription'
            }
          },
          reliabilityLevel: {
            required: false,
            serializedName: 'properties.reliabilityLevel',
            type: {
              name: 'String'
            }
          },
          upgradeMode: {
            required: false,
            serializedName: 'properties.upgradeMode',
            type: {
              name: 'String'
            }
          },
          clientCertificateThumbprints: {
            required: false,
            serializedName: 'properties.clientCertificateThumbprints',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ClientCertificateThumbprintElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClientCertificateThumbprint'
                  }
              }
            }
          },
          clientCertificateCommonNames: {
            required: false,
            serializedName: 'properties.clientCertificateCommonNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ClientCertificateCommonNameElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClientCertificateCommonName'
                  }
              }
            }
          },
          fabricSettings: {
            required: false,
            serializedName: 'properties.fabricSettings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SettingsSectionDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'SettingsSectionDescription'
                  }
              }
            }
          },
          reverseProxyCertificate: {
            required: false,
            serializedName: 'properties.reverseProxyCertificate',
            type: {
              name: 'Composite',
              className: 'CertificateDescription'
            }
          },
          managementEndpoint: {
            required: true,
            serializedName: 'properties.managementEndpoint',
            type: {
              name: 'String'
            }
          },
          nodeTypes: {
            required: true,
            serializedName: 'properties.nodeTypes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NodeTypeDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'NodeTypeDescription'
                  }
              }
            }
          },
          azureActiveDirectory: {
            required: false,
            serializedName: 'properties.azureActiveDirectory',
            type: {
              name: 'Composite',
              className: 'AzureActiveDirectory'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          vmImage: {
            required: false,
            serializedName: 'properties.vmImage',
            type: {
              name: 'String'
            }
          },
          diagnosticsStorageAccountConfig: {
            required: false,
            serializedName: 'properties.diagnosticsStorageAccountConfig',
            type: {
              name: 'Composite',
              className: 'DiagnosticsStorageAccountConfig'
            }
          },
          upgradeDescription: {
            required: false,
            serializedName: 'properties.upgradeDescription',
            type: {
              name: 'Composite',
              className: 'ClusterUpgradePolicy'
            }
          }
        }
      }
    };
  }
}

module.exports = Cluster;
