/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Cluster update request
 *
 */
class ClusterUpdateParameters {
  /**
   * Create a ClusterUpdateParameters.
   * @member {string} [reliabilityLevel] This level is used to set the number
   * of replicas of the system services. Possible values include: 'Bronze',
   * 'Silver', 'Gold'
   * @member {string} [upgradeMode] Cluster upgrade mode indicates if fabric
   * upgrade is initiated automatically by the system or not. Possible values
   * include: 'Automatic', 'Manual'
   * @member {string} [clusterCodeVersion] The ServiceFabric code version, if
   * set it, please make sure you have set upgradeMode to Manual, otherwise ,it
   * will fail, if you are using PUT new cluster, you can get the version by
   * using ClusterVersions_List, if you are updating existing cluster, you can
   * get the availableClusterVersions from Clusters_Get
   * @member {object} [certificate] This primay certificate will be used as
   * cluster node to node security, SSL certificate for cluster management
   * endpoint and default admin client, the certificate should exist in the
   * virtual machine scale sets or Azure key vault, before you add it. It will
   * override original value
   * @member {string} [certificate.thumbprint] Thumbprint of the primary
   * certificate
   * @member {string} [certificate.thumbprintSecondary] Thumbprint of the
   * secondary certificate
   * @member {string} [certificate.x509StoreName] The local certificate store
   * location. Possible values include: 'AddressBook', 'AuthRoot',
   * 'CertificateAuthority', 'Disallowed', 'My', 'Root', 'TrustedPeople',
   * 'TrustedPublisher'
   * @member {array} [clientCertificateThumbprints] The client thumbprint
   * details, it is used for client access for cluster operation, it will
   * override existing collection
   * @member {array} [clientCertificateCommonNames] List of client certificates
   * to whitelist based on common names.
   * @member {array} [fabricSettings] List of custom fabric settings to
   * configure the cluster, Note, it will overwrite existing collection
   * @member {object} [reverseProxyCertificate] Certificate for the reverse
   * proxy
   * @member {string} [reverseProxyCertificate.thumbprint] Thumbprint of the
   * primary certificate
   * @member {string} [reverseProxyCertificate.thumbprintSecondary] Thumbprint
   * of the secondary certificate
   * @member {string} [reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   * @member {array} [nodeTypes] The list of nodetypes that make up the
   * cluster, it will override
   * @member {object} [upgradeDescription] The policy to use when upgrading the
   * cluster.
   * @member {boolean} [upgradeDescription.overrideUserUpgradePolicy] Use the
   * user defined upgrade policy or not
   * @member {boolean} [upgradeDescription.forceRestart] Force node to restart
   * or not
   * @member {string} [upgradeDescription.upgradeReplicaSetCheckTimeout]
   * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
   * @member {string} [upgradeDescription.healthCheckWaitDuration] The length
   * of time to wait after completing an upgrade domain before performing
   * health checks, it represents .Net TimeSpan
   * @member {string} [upgradeDescription.healthCheckStableDuration] The length
   * of time that health checks must pass continuously,it represents .Net
   * TimeSpan
   * @member {string} [upgradeDescription.healthCheckRetryTimeout] The length
   * of time that health checks can fail continuously,it represents .Net
   * TimeSpan
   * @member {string} [upgradeDescription.upgradeTimeout] The upgrade
   * timeout,it represents .Net TimeSpan
   * @member {string} [upgradeDescription.upgradeDomainTimeout] The timeout for
   * any upgrade domain,it represents .Net TimeSpan
   * @member {object} [upgradeDescription.healthPolicy] Cluster health Policy
   * @member {number}
   * [upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The maximum
   * allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   * @member {number}
   * [upgradeDescription.healthPolicy.maxPercentUnhealthyApplications] The
   * maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this
   * value would be 10.
   * @member {object} [upgradeDescription.deltaHealthPolicy] Delta health
   * policy
   * @member {number}
   * [upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes]
   * Additional unhealthy nodes percentage
   * @member {number}
   * [upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes]
   * Additional unhealthy nodes percentage per upgrade domain
   * @member {number}
   * [upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications]
   * Additional unhealthy applications percentage
   * @member {object} [tags] Cluster update parameters
   */
  constructor() {
  }

  /**
   * Defines the metadata of ClusterUpdateParameters
   *
   * @returns {object} metadata of ClusterUpdateParameters
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ClusterUpdateParameters',
      type: {
        name: 'Composite',
        className: 'ClusterUpdateParameters',
        modelProperties: {
          reliabilityLevel: {
            required: false,
            serializedName: 'properties.reliabilityLevel',
            type: {
              name: 'String'
            }
          },
          upgradeMode: {
            required: false,
            serializedName: 'properties.upgradeMode',
            type: {
              name: 'String'
            }
          },
          clusterCodeVersion: {
            required: false,
            serializedName: 'properties.clusterCodeVersion',
            type: {
              name: 'String'
            }
          },
          certificate: {
            required: false,
            serializedName: 'properties.certificate',
            type: {
              name: 'Composite',
              className: 'CertificateDescription'
            }
          },
          clientCertificateThumbprints: {
            required: false,
            serializedName: 'properties.clientCertificateThumbprints',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ClientCertificateThumbprintElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClientCertificateThumbprint'
                  }
              }
            }
          },
          clientCertificateCommonNames: {
            required: false,
            serializedName: 'properties.clientCertificateCommonNames',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ClientCertificateCommonNameElementType',
                  type: {
                    name: 'Composite',
                    className: 'ClientCertificateCommonName'
                  }
              }
            }
          },
          fabricSettings: {
            required: false,
            serializedName: 'properties.fabricSettings',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SettingsSectionDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'SettingsSectionDescription'
                  }
              }
            }
          },
          reverseProxyCertificate: {
            required: false,
            serializedName: 'properties.reverseProxyCertificate',
            type: {
              name: 'Composite',
              className: 'CertificateDescription'
            }
          },
          nodeTypes: {
            required: false,
            serializedName: 'properties.nodeTypes',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NodeTypeDescriptionElementType',
                  type: {
                    name: 'Composite',
                    className: 'NodeTypeDescription'
                  }
              }
            }
          },
          upgradeDescription: {
            required: false,
            serializedName: 'properties.upgradeDescription',
            type: {
              name: 'Composite',
              className: 'ClusterUpgradePolicy'
            }
          },
          tags: {
            required: false,
            serializedName: 'tags',
            type: {
              name: 'Dictionary',
              value: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = ClusterUpdateParameters;
