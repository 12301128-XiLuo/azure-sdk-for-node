/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Cluster upgrade policy
 *
 */
class ClusterUpgradePolicy {
  /**
   * Create a ClusterUpgradePolicy.
   * @member {boolean} [overrideUserUpgradePolicy] Use the user defined upgrade
   * policy or not
   * @member {boolean} [forceRestart] Force node to restart or not
   * @member {string} upgradeReplicaSetCheckTimeout Timeout for replica set
   * upgrade to complete,it represents .Net TimeSpan
   * @member {string} healthCheckWaitDuration The length of time to wait after
   * completing an upgrade domain before performing health checks, it
   * represents .Net TimeSpan
   * @member {string} healthCheckStableDuration The length of time that health
   * checks must pass continuously,it represents .Net TimeSpan
   * @member {string} healthCheckRetryTimeout The length of time that health
   * checks can fail continuously,it represents .Net TimeSpan
   * @member {string} upgradeTimeout The upgrade timeout,it represents .Net
   * TimeSpan
   * @member {string} upgradeDomainTimeout The timeout for any upgrade
   * domain,it represents .Net TimeSpan
   * @member {object} healthPolicy Cluster health Policy
   * @member {number} [healthPolicy.maxPercentUnhealthyNodes] The maximum
   * allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   * @member {number} [healthPolicy.maxPercentUnhealthyApplications] The
   * maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this
   * value would be 10.
   * @member {object} [deltaHealthPolicy] Delta health policy
   * @member {number} [deltaHealthPolicy.maxPercentDeltaUnhealthyNodes]
   * Additional unhealthy nodes percentage
   * @member {number}
   * [deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes] Additional
   * unhealthy nodes percentage per upgrade domain
   * @member {number} [deltaHealthPolicy.maxPercentDeltaUnhealthyApplications]
   * Additional unhealthy applications percentage
   */
  constructor() {
  }

  /**
   * Defines the metadata of ClusterUpgradePolicy
   *
   * @returns {object} metadata of ClusterUpgradePolicy
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ClusterUpgradePolicy',
      type: {
        name: 'Composite',
        className: 'ClusterUpgradePolicy',
        modelProperties: {
          overrideUserUpgradePolicy: {
            required: false,
            serializedName: 'overrideUserUpgradePolicy',
            type: {
              name: 'Boolean'
            }
          },
          forceRestart: {
            required: false,
            serializedName: 'forceRestart',
            type: {
              name: 'Boolean'
            }
          },
          upgradeReplicaSetCheckTimeout: {
            required: true,
            serializedName: 'upgradeReplicaSetCheckTimeout',
            type: {
              name: 'String'
            }
          },
          healthCheckWaitDuration: {
            required: true,
            serializedName: 'healthCheckWaitDuration',
            type: {
              name: 'String'
            }
          },
          healthCheckStableDuration: {
            required: true,
            serializedName: 'healthCheckStableDuration',
            type: {
              name: 'String'
            }
          },
          healthCheckRetryTimeout: {
            required: true,
            serializedName: 'healthCheckRetryTimeout',
            type: {
              name: 'String'
            }
          },
          upgradeTimeout: {
            required: true,
            serializedName: 'upgradeTimeout',
            type: {
              name: 'String'
            }
          },
          upgradeDomainTimeout: {
            required: true,
            serializedName: 'upgradeDomainTimeout',
            type: {
              name: 'String'
            }
          },
          healthPolicy: {
            required: true,
            serializedName: 'healthPolicy',
            type: {
              name: 'Composite',
              className: 'ClusterHealthPolicy'
            }
          },
          deltaHealthPolicy: {
            required: false,
            serializedName: 'deltaHealthPolicy',
            type: {
              name: 'Composite',
              className: 'ClusterUpgradeDeltaHealthPolicy'
            }
          }
        }
      }
    };
  }
}

module.exports = ClusterUpgradePolicy;
