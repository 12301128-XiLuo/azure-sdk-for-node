/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const msRest = require('ms-rest');
const msRestAzure = require('ms-rest-azure');
const WebResource = msRest.WebResource;


/**
 * Update cluster configuration
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the resource belongs or get created
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} parameters The parameters which contains the property value
 * and property name which used to update the cluster configuration
 *
 * @param {string} [parameters.reliabilityLevel] This level is used to set the
 * number of replicas of the system services. Possible values include:
 * 'Bronze', 'Silver', 'Gold'
 *
 * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
 * fabric upgrade is initiated automatically by the system or not. Possible
 * values include: 'Automatic', 'Manual'
 *
 * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
 * version, if set it, please make sure you have set upgradeMode to Manual,
 * otherwise ,it will fail, if you are using PUT new cluster, you can get the
 * version by using ClusterVersions_List, if you are updating existing cluster,
 * you can get the availableClusterVersions from Clusters_Get
 *
 * @param {object} [parameters.certificate] This primay certificate will be
 * used as cluster node to node security, SSL certificate for cluster
 * management endpoint and default admin client, the certificate should exist
 * in the virtual machine scale sets or Azure key vault, before you add it. It
 * will override original value
 *
 * @param {array} [parameters.clientCertificateThumbprints] The client
 * thumbprint details, it is used for client access for cluster operation, it
 * will override existing collection
 *
 * @param {array} [parameters.clientCertificateCommonNames] List of client
 * certificates to whitelist based on common names.
 *
 * @param {array} [parameters.fabricSettings] List of custom fabric settings to
 * configure the cluster, Note, it will overwrite existing collection
 *
 * @param {object} [parameters.reverseProxyCertificate] Certificate for the
 * reverse proxy
 *
 * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
 * the primary certificate
 *
 * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
 * Thumbprint of the secondary certificate
 *
 * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
 * certificate store location. Possible values include: 'AddressBook',
 * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
 * 'TrustedPeople', 'TrustedPublisher'
 *
 * @param {array} [parameters.nodeTypes] The list of nodetypes that make up the
 * cluster, it will override
 *
 * @param {object} [parameters.upgradeDescription] The policy to use when
 * upgrading the cluster.
 *
 * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
 * Use the user defined upgrade policy or not
 *
 * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
 * restart or not
 *
 * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
 * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
 * length of time to wait after completing an upgrade domain before performing
 * health checks, it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
 * length of time that health checks must pass continuously,it represents .Net
 * TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
 * length of time that health checks can fail continuously,it represents .Net
 * TimeSpan
 *
 * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
 * timeout,it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
 * timeout for any upgrade domain,it represents .Net TimeSpan
 *
 * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
 * Policy
 *
 * @param {number}
 * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
 * maximum allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * @param {number}
 * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
 * The maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
 * health policy
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
 * Additional unhealthy nodes percentage
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
 * Additional unhealthy nodes percentage per upgrade domain
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
 * Additional unhealthy applications percentage
 *
 * @param {object} [parameters.tags] Cluster update parameters
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Cluster} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _update(resourceGroupName, clusterName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginUpdate(resourceGroupName, clusterName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Cluster']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Get cluster resource
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the resource belongs or get created
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Cluster} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _get(resourceGroupName, clusterName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Cluster']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}


/**
 * Create cluster resource
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the resource belongs or get created
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} parameters Put Request
 *
 * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
 * version running in your cluster
 *
 * @param {object} [parameters.certificate] This primay certificate will be
 * used as cluster node to node security, SSL certificate for cluster
 * management endpoint and default admin client
 *
 * @param {string} [parameters.reliabilityLevel] Cluster reliability level
 * indicates replica set size of system service. Possible values include:
 * 'Bronze', 'Silver', 'Gold', 'Platinum'
 *
 * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
 * fabric upgrade is initiated automatically by the system or not. Possible
 * values include: 'Automatic', 'Manual'
 *
 * @param {array} [parameters.clientCertificateThumbprints] The client
 * thumbprint details ,it is used for client access for cluster operation
 *
 * @param {array} [parameters.clientCertificateCommonNames]  List of client
 * certificates to whitelist based on common names
 *
 * @param {array} [parameters.fabricSettings] List of custom fabric settings to
 * configure the cluster.
 *
 * @param {object} [parameters.reverseProxyCertificate] The server certificate
 * used by reverse proxy
 *
 * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
 * the primary certificate
 *
 * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
 * Thumbprint of the secondary certificate
 *
 * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
 * certificate store location. Possible values include: 'AddressBook',
 * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
 * 'TrustedPeople', 'TrustedPublisher'
 *
 * @param {string} parameters.managementEndpoint The http management endpoint
 * of the cluster
 *
 * @param {array} parameters.nodeTypes The list of nodetypes that make up the
 * cluster
 *
 * @param {object} [parameters.azureActiveDirectory] The settings to enable AAD
 * authentication on the cluster
 *
 * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
 * directory tenant id
 *
 * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
 * active directory cluster application id
 *
 * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
 * active directory client application id
 *
 * @param {string} [parameters.vmImage] The name of VM image VMSS has been
 * configured with. Generic names such as Windows or Linux can be used.
 *
 * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
 * diagnostics account configuration details
 *
 * @param {string}
 * parameters.diagnosticsStorageAccountConfig.storageAccountName Diagnostics
 * storage account name
 *
 * @param {string}
 * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName Protected
 * Diagnostics storage key name
 *
 * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint
 * Diagnostics storage account blob endpoint
 *
 * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint
 * Diagnostics storage account queue endpoint
 *
 * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint
 * Diagnostics storage account table endpoint
 *
 * @param {object} [parameters.upgradeDescription] The policy to use when
 * upgrading the cluster.
 *
 * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
 * Use the user defined upgrade policy or not
 *
 * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
 * restart or not
 *
 * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
 * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
 * length of time to wait after completing an upgrade domain before performing
 * health checks, it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
 * length of time that health checks must pass continuously,it represents .Net
 * TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
 * length of time that health checks can fail continuously,it represents .Net
 * TimeSpan
 *
 * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
 * timeout,it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
 * timeout for any upgrade domain,it represents .Net TimeSpan
 *
 * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
 * Policy
 *
 * @param {number}
 * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
 * maximum allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * @param {number}
 * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
 * The maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
 * health policy
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
 * Additional unhealthy nodes percentage
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
 * Additional unhealthy nodes percentage per upgrade domain
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
 * Additional unhealthy applications percentage
 *
 * @param {string} parameters.location Resource location.
 *
 * @param {object} [parameters.tags] Resource tags.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Cluster} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _create(resourceGroupName, clusterName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }

  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Send request
  this.beginCreate(resourceGroupName, clusterName, parameters, options, (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);

    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.getLongRunningOperationResult(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);

      // Create Result
      let result = null;

      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;

      // Deserialize Response
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Cluster']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }

      return callback(null, result, httpRequest, response);
    });
  });
}

/**
 * Delete cluster resource
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the resource belongs or get created
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteMethod(resourceGroupName, clusterName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 204) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List cluster resource by resource group
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the resource belongs or get created
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ClusterListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroup(resourceGroupName, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ClusterListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List cluster resource
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ClusterListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _list(options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabric/clusters';
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ClusterListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Update cluster configuration
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the resource belongs or get created
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} parameters The parameters which contains the property value
 * and property name which used to update the cluster configuration
 *
 * @param {string} [parameters.reliabilityLevel] This level is used to set the
 * number of replicas of the system services. Possible values include:
 * 'Bronze', 'Silver', 'Gold'
 *
 * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
 * fabric upgrade is initiated automatically by the system or not. Possible
 * values include: 'Automatic', 'Manual'
 *
 * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
 * version, if set it, please make sure you have set upgradeMode to Manual,
 * otherwise ,it will fail, if you are using PUT new cluster, you can get the
 * version by using ClusterVersions_List, if you are updating existing cluster,
 * you can get the availableClusterVersions from Clusters_Get
 *
 * @param {object} [parameters.certificate] This primay certificate will be
 * used as cluster node to node security, SSL certificate for cluster
 * management endpoint and default admin client, the certificate should exist
 * in the virtual machine scale sets or Azure key vault, before you add it. It
 * will override original value
 *
 * @param {array} [parameters.clientCertificateThumbprints] The client
 * thumbprint details, it is used for client access for cluster operation, it
 * will override existing collection
 *
 * @param {array} [parameters.clientCertificateCommonNames] List of client
 * certificates to whitelist based on common names.
 *
 * @param {array} [parameters.fabricSettings] List of custom fabric settings to
 * configure the cluster, Note, it will overwrite existing collection
 *
 * @param {object} [parameters.reverseProxyCertificate] Certificate for the
 * reverse proxy
 *
 * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
 * the primary certificate
 *
 * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
 * Thumbprint of the secondary certificate
 *
 * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
 * certificate store location. Possible values include: 'AddressBook',
 * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
 * 'TrustedPeople', 'TrustedPublisher'
 *
 * @param {array} [parameters.nodeTypes] The list of nodetypes that make up the
 * cluster, it will override
 *
 * @param {object} [parameters.upgradeDescription] The policy to use when
 * upgrading the cluster.
 *
 * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
 * Use the user defined upgrade policy or not
 *
 * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
 * restart or not
 *
 * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
 * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
 * length of time to wait after completing an upgrade domain before performing
 * health checks, it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
 * length of time that health checks must pass continuously,it represents .Net
 * TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
 * length of time that health checks can fail continuously,it represents .Net
 * TimeSpan
 *
 * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
 * timeout,it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
 * timeout for any upgrade domain,it represents .Net TimeSpan
 *
 * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
 * Policy
 *
 * @param {number}
 * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
 * maximum allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * @param {number}
 * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
 * The maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
 * health policy
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
 * Additional unhealthy nodes percentage
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
 * Additional unhealthy nodes percentage per upgrade domain
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
 * Additional unhealthy applications percentage
 *
 * @param {object} [parameters.tags] Cluster update parameters
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Cluster} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginUpdate(resourceGroupName, clusterName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['ClusterUpdateParameters']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Cluster']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * Create cluster resource
 *
 * @param {string} resourceGroupName The name of the resource group to which
 * the resource belongs or get created
 *
 * @param {string} clusterName The name of the cluster resource
 *
 * @param {object} parameters Put Request
 *
 * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
 * version running in your cluster
 *
 * @param {object} [parameters.certificate] This primay certificate will be
 * used as cluster node to node security, SSL certificate for cluster
 * management endpoint and default admin client
 *
 * @param {string} [parameters.reliabilityLevel] Cluster reliability level
 * indicates replica set size of system service. Possible values include:
 * 'Bronze', 'Silver', 'Gold', 'Platinum'
 *
 * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
 * fabric upgrade is initiated automatically by the system or not. Possible
 * values include: 'Automatic', 'Manual'
 *
 * @param {array} [parameters.clientCertificateThumbprints] The client
 * thumbprint details ,it is used for client access for cluster operation
 *
 * @param {array} [parameters.clientCertificateCommonNames]  List of client
 * certificates to whitelist based on common names
 *
 * @param {array} [parameters.fabricSettings] List of custom fabric settings to
 * configure the cluster.
 *
 * @param {object} [parameters.reverseProxyCertificate] The server certificate
 * used by reverse proxy
 *
 * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
 * the primary certificate
 *
 * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
 * Thumbprint of the secondary certificate
 *
 * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
 * certificate store location. Possible values include: 'AddressBook',
 * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
 * 'TrustedPeople', 'TrustedPublisher'
 *
 * @param {string} parameters.managementEndpoint The http management endpoint
 * of the cluster
 *
 * @param {array} parameters.nodeTypes The list of nodetypes that make up the
 * cluster
 *
 * @param {object} [parameters.azureActiveDirectory] The settings to enable AAD
 * authentication on the cluster
 *
 * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
 * directory tenant id
 *
 * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
 * active directory cluster application id
 *
 * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
 * active directory client application id
 *
 * @param {string} [parameters.vmImage] The name of VM image VMSS has been
 * configured with. Generic names such as Windows or Linux can be used.
 *
 * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
 * diagnostics account configuration details
 *
 * @param {string}
 * parameters.diagnosticsStorageAccountConfig.storageAccountName Diagnostics
 * storage account name
 *
 * @param {string}
 * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName Protected
 * Diagnostics storage key name
 *
 * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint
 * Diagnostics storage account blob endpoint
 *
 * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint
 * Diagnostics storage account queue endpoint
 *
 * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint
 * Diagnostics storage account table endpoint
 *
 * @param {object} [parameters.upgradeDescription] The policy to use when
 * upgrading the cluster.
 *
 * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
 * Use the user defined upgrade policy or not
 *
 * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
 * restart or not
 *
 * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
 * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
 * length of time to wait after completing an upgrade domain before performing
 * health checks, it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
 * length of time that health checks must pass continuously,it represents .Net
 * TimeSpan
 *
 * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
 * length of time that health checks can fail continuously,it represents .Net
 * TimeSpan
 *
 * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
 * timeout,it represents .Net TimeSpan
 *
 * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
 * timeout for any upgrade domain,it represents .Net TimeSpan
 *
 * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
 * Policy
 *
 * @param {number}
 * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
 * maximum allowed percentage of unhealthy nodes before reporting an error. For
 * example, to allow 10% of nodes to be unhealthy, this value would be 10.
 *
 * @param {number}
 * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
 * The maximum allowed percentage of unhealthy applications before reporting an
 * error. For example, to allow 10% of applications to be unhealthy, this value
 * would be 10.
 *
 * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
 * health policy
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
 * Additional unhealthy nodes percentage
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
 * Additional unhealthy nodes percentage per upgrade domain
 *
 * @param {number}
 * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
 * Additional unhealthy applications percentage
 *
 * @param {string} parameters.location Resource location.
 *
 * @param {object} [parameters.tags] Resource tags.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link Cluster} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _beginCreate(resourceGroupName, clusterName, parameters, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (resourceGroupName === null || resourceGroupName === undefined || typeof resourceGroupName.valueOf() !== 'string') {
      throw new Error('resourceGroupName cannot be null or undefined and it must be of type string.');
    }
    if (clusterName === null || clusterName === undefined || typeof clusterName.valueOf() !== 'string') {
      throw new Error('clusterName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
      throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
    }
    if (parameters === null || parameters === undefined) {
      throw new Error('parameters cannot be null or undefined.');
    }
    if (this.client.subscriptionId === null || this.client.subscriptionId === undefined || typeof this.client.subscriptionId.valueOf() !== 'string') {
      throw new Error('this.client.subscriptionId cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.client.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}';
  requestUrl = requestUrl.replace('{resourceGroupName}', encodeURIComponent(resourceGroupName));
  requestUrl = requestUrl.replace('{clusterName}', encodeURIComponent(clusterName));
  requestUrl = requestUrl.replace('{subscriptionId}', encodeURIComponent(this.client.subscriptionId));
  let queryParameters = [];
  queryParameters.push('api-version=' + encodeURIComponent(this.client.apiVersion));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (parameters !== null && parameters !== undefined) {
      let requestModelMapper = new client.models['Cluster']().mapper();
      requestModel = client.serialize(requestModelMapper, parameters, 'parameters');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(parameters, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200 && statusCode !== 202) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['Cluster']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List cluster resource by resource group
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ClusterListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listByResourceGroupNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ClusterListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * List cluster resource
 *
 * @param {string} nextPageLink The NextLink from the previous successful call
 * to List operation.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ClusterListResult} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _listNext(nextPageLink, options, callback) {
   /* jshint validthis: true */
  let client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
      throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
    }
    if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
      throw new Error('this.client.acceptLanguage must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let requestUrl = '{nextLink}';
  requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if (this.client.generateClientRequestId) {
      httpRequest.headers['x-ms-client-request-id'] = msRestAzure.generateUuid();
  }
  if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
    httpRequest.headers['accept-language'] = this.client.acceptLanguage;
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          let resultMapper = new client.models['CloudError']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ClusterListResult']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a Clusters. */
class Clusters {
  /**
   * Create a Clusters.
   * @param {ServiceFabricManagementClient} client Reference to the service client.
   */
  constructor(client) {
    this.client = client;
    this._update = _update;
    this._get = _get;
    this._create = _create;
    this._deleteMethod = _deleteMethod;
    this._listByResourceGroup = _listByResourceGroup;
    this._list = _list;
    this._beginUpdate = _beginUpdate;
    this._beginCreate = _beginCreate;
    this._listByResourceGroupNext = _listByResourceGroupNext;
    this._listNext = _listNext;
  }

  /**
   * Update cluster configuration
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} parameters The parameters which contains the property value
   * and property name which used to update the cluster configuration
   *
   * @param {string} [parameters.reliabilityLevel] This level is used to set the
   * number of replicas of the system services. Possible values include:
   * 'Bronze', 'Silver', 'Gold'
   *
   * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
   * fabric upgrade is initiated automatically by the system or not. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
   * version, if set it, please make sure you have set upgradeMode to Manual,
   * otherwise ,it will fail, if you are using PUT new cluster, you can get the
   * version by using ClusterVersions_List, if you are updating existing cluster,
   * you can get the availableClusterVersions from Clusters_Get
   *
   * @param {object} [parameters.certificate] This primay certificate will be
   * used as cluster node to node security, SSL certificate for cluster
   * management endpoint and default admin client, the certificate should exist
   * in the virtual machine scale sets or Azure key vault, before you add it. It
   * will override original value
   *
   * @param {array} [parameters.clientCertificateThumbprints] The client
   * thumbprint details, it is used for client access for cluster operation, it
   * will override existing collection
   *
   * @param {array} [parameters.clientCertificateCommonNames] List of client
   * certificates to whitelist based on common names.
   *
   * @param {array} [parameters.fabricSettings] List of custom fabric settings to
   * configure the cluster, Note, it will overwrite existing collection
   *
   * @param {object} [parameters.reverseProxyCertificate] Certificate for the
   * reverse proxy
   *
   * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
   * the primary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {array} [parameters.nodeTypes] The list of nodetypes that make up the
   * cluster, it will override
   *
   * @param {object} [parameters.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
   * Use the user defined upgrade policy or not
   *
   * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
   * restart or not
   *
   * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
   * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks, it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
   * length of time that health checks must pass continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
   * length of time that health checks can fail continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
   * timeout,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
   * timeout for any upgrade domain,it represents .Net TimeSpan
   *
   * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
   * Policy
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
   * health policy
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage per upgrade domain
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * Additional unhealthy applications percentage
   *
   * @param {object} [parameters.tags] Cluster update parameters
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateWithHttpOperationResponse(resourceGroupName, clusterName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._update(resourceGroupName, clusterName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Update cluster configuration
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} parameters The parameters which contains the property value
   * and property name which used to update the cluster configuration
   *
   * @param {string} [parameters.reliabilityLevel] This level is used to set the
   * number of replicas of the system services. Possible values include:
   * 'Bronze', 'Silver', 'Gold'
   *
   * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
   * fabric upgrade is initiated automatically by the system or not. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
   * version, if set it, please make sure you have set upgradeMode to Manual,
   * otherwise ,it will fail, if you are using PUT new cluster, you can get the
   * version by using ClusterVersions_List, if you are updating existing cluster,
   * you can get the availableClusterVersions from Clusters_Get
   *
   * @param {object} [parameters.certificate] This primay certificate will be
   * used as cluster node to node security, SSL certificate for cluster
   * management endpoint and default admin client, the certificate should exist
   * in the virtual machine scale sets or Azure key vault, before you add it. It
   * will override original value
   *
   * @param {array} [parameters.clientCertificateThumbprints] The client
   * thumbprint details, it is used for client access for cluster operation, it
   * will override existing collection
   *
   * @param {array} [parameters.clientCertificateCommonNames] List of client
   * certificates to whitelist based on common names.
   *
   * @param {array} [parameters.fabricSettings] List of custom fabric settings to
   * configure the cluster, Note, it will overwrite existing collection
   *
   * @param {object} [parameters.reverseProxyCertificate] Certificate for the
   * reverse proxy
   *
   * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
   * the primary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {array} [parameters.nodeTypes] The list of nodetypes that make up the
   * cluster, it will override
   *
   * @param {object} [parameters.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
   * Use the user defined upgrade policy or not
   *
   * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
   * restart or not
   *
   * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
   * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks, it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
   * length of time that health checks must pass continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
   * length of time that health checks can fail continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
   * timeout,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
   * timeout for any upgrade domain,it represents .Net TimeSpan
   *
   * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
   * Policy
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
   * health policy
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage per upgrade domain
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * Additional unhealthy applications percentage
   *
   * @param {object} [parameters.tags] Cluster update parameters
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Cluster} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Cluster} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  update(resourceGroupName, clusterName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._update(resourceGroupName, clusterName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._update(resourceGroupName, clusterName, parameters, options, optionalCallback);
    }
  }

  /**
   * Get cluster resource
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getWithHttpOperationResponse(resourceGroupName, clusterName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._get(resourceGroupName, clusterName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Get cluster resource
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Cluster} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Cluster} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  get(resourceGroupName, clusterName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._get(resourceGroupName, clusterName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._get(resourceGroupName, clusterName, options, optionalCallback);
    }
  }

  /**
   * Create cluster resource
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} parameters Put Request
   *
   * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
   * version running in your cluster
   *
   * @param {object} [parameters.certificate] This primay certificate will be
   * used as cluster node to node security, SSL certificate for cluster
   * management endpoint and default admin client
   *
   * @param {string} [parameters.reliabilityLevel] Cluster reliability level
   * indicates replica set size of system service. Possible values include:
   * 'Bronze', 'Silver', 'Gold', 'Platinum'
   *
   * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
   * fabric upgrade is initiated automatically by the system or not. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {array} [parameters.clientCertificateThumbprints] The client
   * thumbprint details ,it is used for client access for cluster operation
   *
   * @param {array} [parameters.clientCertificateCommonNames]  List of client
   * certificates to whitelist based on common names
   *
   * @param {array} [parameters.fabricSettings] List of custom fabric settings to
   * configure the cluster.
   *
   * @param {object} [parameters.reverseProxyCertificate] The server certificate
   * used by reverse proxy
   *
   * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
   * the primary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {string} parameters.managementEndpoint The http management endpoint
   * of the cluster
   *
   * @param {array} parameters.nodeTypes The list of nodetypes that make up the
   * cluster
   *
   * @param {object} [parameters.azureActiveDirectory] The settings to enable AAD
   * authentication on the cluster
   *
   * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
   * directory tenant id
   *
   * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
   * active directory cluster application id
   *
   * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
   * active directory client application id
   *
   * @param {string} [parameters.vmImage] The name of VM image VMSS has been
   * configured with. Generic names such as Windows or Linux can be used.
   *
   * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
   * diagnostics account configuration details
   *
   * @param {string}
   * parameters.diagnosticsStorageAccountConfig.storageAccountName Diagnostics
   * storage account name
   *
   * @param {string}
   * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName Protected
   * Diagnostics storage key name
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint
   * Diagnostics storage account blob endpoint
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint
   * Diagnostics storage account queue endpoint
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint
   * Diagnostics storage account table endpoint
   *
   * @param {object} [parameters.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
   * Use the user defined upgrade policy or not
   *
   * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
   * restart or not
   *
   * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
   * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks, it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
   * length of time that health checks must pass continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
   * length of time that health checks can fail continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
   * timeout,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
   * timeout for any upgrade domain,it represents .Net TimeSpan
   *
   * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
   * Policy
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
   * health policy
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage per upgrade domain
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * Additional unhealthy applications percentage
   *
   * @param {string} parameters.location Resource location.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createWithHttpOperationResponse(resourceGroupName, clusterName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._create(resourceGroupName, clusterName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create cluster resource
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} parameters Put Request
   *
   * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
   * version running in your cluster
   *
   * @param {object} [parameters.certificate] This primay certificate will be
   * used as cluster node to node security, SSL certificate for cluster
   * management endpoint and default admin client
   *
   * @param {string} [parameters.reliabilityLevel] Cluster reliability level
   * indicates replica set size of system service. Possible values include:
   * 'Bronze', 'Silver', 'Gold', 'Platinum'
   *
   * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
   * fabric upgrade is initiated automatically by the system or not. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {array} [parameters.clientCertificateThumbprints] The client
   * thumbprint details ,it is used for client access for cluster operation
   *
   * @param {array} [parameters.clientCertificateCommonNames]  List of client
   * certificates to whitelist based on common names
   *
   * @param {array} [parameters.fabricSettings] List of custom fabric settings to
   * configure the cluster.
   *
   * @param {object} [parameters.reverseProxyCertificate] The server certificate
   * used by reverse proxy
   *
   * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
   * the primary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {string} parameters.managementEndpoint The http management endpoint
   * of the cluster
   *
   * @param {array} parameters.nodeTypes The list of nodetypes that make up the
   * cluster
   *
   * @param {object} [parameters.azureActiveDirectory] The settings to enable AAD
   * authentication on the cluster
   *
   * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
   * directory tenant id
   *
   * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
   * active directory cluster application id
   *
   * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
   * active directory client application id
   *
   * @param {string} [parameters.vmImage] The name of VM image VMSS has been
   * configured with. Generic names such as Windows or Linux can be used.
   *
   * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
   * diagnostics account configuration details
   *
   * @param {string}
   * parameters.diagnosticsStorageAccountConfig.storageAccountName Diagnostics
   * storage account name
   *
   * @param {string}
   * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName Protected
   * Diagnostics storage key name
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint
   * Diagnostics storage account blob endpoint
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint
   * Diagnostics storage account queue endpoint
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint
   * Diagnostics storage account table endpoint
   *
   * @param {object} [parameters.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
   * Use the user defined upgrade policy or not
   *
   * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
   * restart or not
   *
   * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
   * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks, it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
   * length of time that health checks must pass continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
   * length of time that health checks can fail continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
   * timeout,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
   * timeout for any upgrade domain,it represents .Net TimeSpan
   *
   * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
   * Policy
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
   * health policy
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage per upgrade domain
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * Additional unhealthy applications percentage
   *
   * @param {string} parameters.location Resource location.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Cluster} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Cluster} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  create(resourceGroupName, clusterName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._create(resourceGroupName, clusterName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._create(resourceGroupName, clusterName, parameters, options, optionalCallback);
    }
  }

  /**
   * Delete cluster resource
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteMethodWithHttpOperationResponse(resourceGroupName, clusterName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteMethod(resourceGroupName, clusterName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Delete cluster resource
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(resourceGroupName, clusterName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteMethod(resourceGroupName, clusterName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteMethod(resourceGroupName, clusterName, options, optionalCallback);
    }
  }

  /**
   * List cluster resource by resource group
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupWithHttpOperationResponse(resourceGroupName, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List cluster resource by resource group
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ClusterListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ClusterListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroup(resourceGroupName, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroup(resourceGroupName, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroup(resourceGroupName, options, optionalCallback);
    }
  }

  /**
   * List cluster resource
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listWithHttpOperationResponse(options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._list(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List cluster resource
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ClusterListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ClusterListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  list(options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._list(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._list(options, optionalCallback);
    }
  }

  /**
   * Update cluster configuration
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} parameters The parameters which contains the property value
   * and property name which used to update the cluster configuration
   *
   * @param {string} [parameters.reliabilityLevel] This level is used to set the
   * number of replicas of the system services. Possible values include:
   * 'Bronze', 'Silver', 'Gold'
   *
   * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
   * fabric upgrade is initiated automatically by the system or not. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
   * version, if set it, please make sure you have set upgradeMode to Manual,
   * otherwise ,it will fail, if you are using PUT new cluster, you can get the
   * version by using ClusterVersions_List, if you are updating existing cluster,
   * you can get the availableClusterVersions from Clusters_Get
   *
   * @param {object} [parameters.certificate] This primay certificate will be
   * used as cluster node to node security, SSL certificate for cluster
   * management endpoint and default admin client, the certificate should exist
   * in the virtual machine scale sets or Azure key vault, before you add it. It
   * will override original value
   *
   * @param {array} [parameters.clientCertificateThumbprints] The client
   * thumbprint details, it is used for client access for cluster operation, it
   * will override existing collection
   *
   * @param {array} [parameters.clientCertificateCommonNames] List of client
   * certificates to whitelist based on common names.
   *
   * @param {array} [parameters.fabricSettings] List of custom fabric settings to
   * configure the cluster, Note, it will overwrite existing collection
   *
   * @param {object} [parameters.reverseProxyCertificate] Certificate for the
   * reverse proxy
   *
   * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
   * the primary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {array} [parameters.nodeTypes] The list of nodetypes that make up the
   * cluster, it will override
   *
   * @param {object} [parameters.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
   * Use the user defined upgrade policy or not
   *
   * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
   * restart or not
   *
   * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
   * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks, it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
   * length of time that health checks must pass continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
   * length of time that health checks can fail continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
   * timeout,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
   * timeout for any upgrade domain,it represents .Net TimeSpan
   *
   * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
   * Policy
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
   * health policy
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage per upgrade domain
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * Additional unhealthy applications percentage
   *
   * @param {object} [parameters.tags] Cluster update parameters
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginUpdateWithHttpOperationResponse(resourceGroupName, clusterName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginUpdate(resourceGroupName, clusterName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Update cluster configuration
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} parameters The parameters which contains the property value
   * and property name which used to update the cluster configuration
   *
   * @param {string} [parameters.reliabilityLevel] This level is used to set the
   * number of replicas of the system services. Possible values include:
   * 'Bronze', 'Silver', 'Gold'
   *
   * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
   * fabric upgrade is initiated automatically by the system or not. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
   * version, if set it, please make sure you have set upgradeMode to Manual,
   * otherwise ,it will fail, if you are using PUT new cluster, you can get the
   * version by using ClusterVersions_List, if you are updating existing cluster,
   * you can get the availableClusterVersions from Clusters_Get
   *
   * @param {object} [parameters.certificate] This primay certificate will be
   * used as cluster node to node security, SSL certificate for cluster
   * management endpoint and default admin client, the certificate should exist
   * in the virtual machine scale sets or Azure key vault, before you add it. It
   * will override original value
   *
   * @param {array} [parameters.clientCertificateThumbprints] The client
   * thumbprint details, it is used for client access for cluster operation, it
   * will override existing collection
   *
   * @param {array} [parameters.clientCertificateCommonNames] List of client
   * certificates to whitelist based on common names.
   *
   * @param {array} [parameters.fabricSettings] List of custom fabric settings to
   * configure the cluster, Note, it will overwrite existing collection
   *
   * @param {object} [parameters.reverseProxyCertificate] Certificate for the
   * reverse proxy
   *
   * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
   * the primary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {array} [parameters.nodeTypes] The list of nodetypes that make up the
   * cluster, it will override
   *
   * @param {object} [parameters.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
   * Use the user defined upgrade policy or not
   *
   * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
   * restart or not
   *
   * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
   * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks, it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
   * length of time that health checks must pass continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
   * length of time that health checks can fail continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
   * timeout,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
   * timeout for any upgrade domain,it represents .Net TimeSpan
   *
   * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
   * Policy
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
   * health policy
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage per upgrade domain
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * Additional unhealthy applications percentage
   *
   * @param {object} [parameters.tags] Cluster update parameters
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Cluster} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Cluster} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginUpdate(resourceGroupName, clusterName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginUpdate(resourceGroupName, clusterName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginUpdate(resourceGroupName, clusterName, parameters, options, optionalCallback);
    }
  }

  /**
   * Create cluster resource
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} parameters Put Request
   *
   * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
   * version running in your cluster
   *
   * @param {object} [parameters.certificate] This primay certificate will be
   * used as cluster node to node security, SSL certificate for cluster
   * management endpoint and default admin client
   *
   * @param {string} [parameters.reliabilityLevel] Cluster reliability level
   * indicates replica set size of system service. Possible values include:
   * 'Bronze', 'Silver', 'Gold', 'Platinum'
   *
   * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
   * fabric upgrade is initiated automatically by the system or not. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {array} [parameters.clientCertificateThumbprints] The client
   * thumbprint details ,it is used for client access for cluster operation
   *
   * @param {array} [parameters.clientCertificateCommonNames]  List of client
   * certificates to whitelist based on common names
   *
   * @param {array} [parameters.fabricSettings] List of custom fabric settings to
   * configure the cluster.
   *
   * @param {object} [parameters.reverseProxyCertificate] The server certificate
   * used by reverse proxy
   *
   * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
   * the primary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {string} parameters.managementEndpoint The http management endpoint
   * of the cluster
   *
   * @param {array} parameters.nodeTypes The list of nodetypes that make up the
   * cluster
   *
   * @param {object} [parameters.azureActiveDirectory] The settings to enable AAD
   * authentication on the cluster
   *
   * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
   * directory tenant id
   *
   * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
   * active directory cluster application id
   *
   * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
   * active directory client application id
   *
   * @param {string} [parameters.vmImage] The name of VM image VMSS has been
   * configured with. Generic names such as Windows or Linux can be used.
   *
   * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
   * diagnostics account configuration details
   *
   * @param {string}
   * parameters.diagnosticsStorageAccountConfig.storageAccountName Diagnostics
   * storage account name
   *
   * @param {string}
   * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName Protected
   * Diagnostics storage key name
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint
   * Diagnostics storage account blob endpoint
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint
   * Diagnostics storage account queue endpoint
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint
   * Diagnostics storage account table endpoint
   *
   * @param {object} [parameters.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
   * Use the user defined upgrade policy or not
   *
   * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
   * restart or not
   *
   * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
   * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks, it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
   * length of time that health checks must pass continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
   * length of time that health checks can fail continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
   * timeout,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
   * timeout for any upgrade domain,it represents .Net TimeSpan
   *
   * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
   * Policy
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
   * health policy
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage per upgrade domain
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * Additional unhealthy applications percentage
   *
   * @param {string} parameters.location Resource location.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  beginCreateWithHttpOperationResponse(resourceGroupName, clusterName, parameters, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._beginCreate(resourceGroupName, clusterName, parameters, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * Create cluster resource
   *
   * @param {string} resourceGroupName The name of the resource group to which
   * the resource belongs or get created
   *
   * @param {string} clusterName The name of the cluster resource
   *
   * @param {object} parameters Put Request
   *
   * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
   * version running in your cluster
   *
   * @param {object} [parameters.certificate] This primay certificate will be
   * used as cluster node to node security, SSL certificate for cluster
   * management endpoint and default admin client
   *
   * @param {string} [parameters.reliabilityLevel] Cluster reliability level
   * indicates replica set size of system service. Possible values include:
   * 'Bronze', 'Silver', 'Gold', 'Platinum'
   *
   * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
   * fabric upgrade is initiated automatically by the system or not. Possible
   * values include: 'Automatic', 'Manual'
   *
   * @param {array} [parameters.clientCertificateThumbprints] The client
   * thumbprint details ,it is used for client access for cluster operation
   *
   * @param {array} [parameters.clientCertificateCommonNames]  List of client
   * certificates to whitelist based on common names
   *
   * @param {array} [parameters.fabricSettings] List of custom fabric settings to
   * configure the cluster.
   *
   * @param {object} [parameters.reverseProxyCertificate] The server certificate
   * used by reverse proxy
   *
   * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
   * the primary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
   * Thumbprint of the secondary certificate
   *
   * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
   * certificate store location. Possible values include: 'AddressBook',
   * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
   * 'TrustedPeople', 'TrustedPublisher'
   *
   * @param {string} parameters.managementEndpoint The http management endpoint
   * of the cluster
   *
   * @param {array} parameters.nodeTypes The list of nodetypes that make up the
   * cluster
   *
   * @param {object} [parameters.azureActiveDirectory] The settings to enable AAD
   * authentication on the cluster
   *
   * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
   * directory tenant id
   *
   * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
   * active directory cluster application id
   *
   * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
   * active directory client application id
   *
   * @param {string} [parameters.vmImage] The name of VM image VMSS has been
   * configured with. Generic names such as Windows or Linux can be used.
   *
   * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
   * diagnostics account configuration details
   *
   * @param {string}
   * parameters.diagnosticsStorageAccountConfig.storageAccountName Diagnostics
   * storage account name
   *
   * @param {string}
   * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName Protected
   * Diagnostics storage key name
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint
   * Diagnostics storage account blob endpoint
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint
   * Diagnostics storage account queue endpoint
   *
   * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint
   * Diagnostics storage account table endpoint
   *
   * @param {object} [parameters.upgradeDescription] The policy to use when
   * upgrading the cluster.
   *
   * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
   * Use the user defined upgrade policy or not
   *
   * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
   * restart or not
   *
   * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
   * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
   * length of time to wait after completing an upgrade domain before performing
   * health checks, it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
   * length of time that health checks must pass continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
   * length of time that health checks can fail continuously,it represents .Net
   * TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
   * timeout,it represents .Net TimeSpan
   *
   * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
   * timeout for any upgrade domain,it represents .Net TimeSpan
   *
   * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
   * Policy
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
   * maximum allowed percentage of unhealthy nodes before reporting an error. For
   * example, to allow 10% of nodes to be unhealthy, this value would be 10.
   *
   * @param {number}
   * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
   * The maximum allowed percentage of unhealthy applications before reporting an
   * error. For example, to allow 10% of applications to be unhealthy, this value
   * would be 10.
   *
   * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
   * health policy
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
   * Additional unhealthy nodes percentage per upgrade domain
   *
   * @param {number}
   * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
   * Additional unhealthy applications percentage
   *
   * @param {string} parameters.location Resource location.
   *
   * @param {object} [parameters.tags] Resource tags.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {Cluster} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Cluster} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  beginCreate(resourceGroupName, clusterName, parameters, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._beginCreate(resourceGroupName, clusterName, parameters, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._beginCreate(resourceGroupName, clusterName, parameters, options, optionalCallback);
    }
  }

  /**
   * List cluster resource by resource group
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listByResourceGroupNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List cluster resource by resource group
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ClusterListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ClusterListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listByResourceGroupNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listByResourceGroupNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listByResourceGroupNext(nextPageLink, options, optionalCallback);
    }
  }

  /**
   * List cluster resource
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  listNextWithHttpOperationResponse(nextPageLink, options) {
    let client = this.client;
    let self = this;
    return new Promise((resolve, reject) => {
      self._listNext(nextPageLink, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * List cluster resource
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ClusterListResult} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ClusterListResult} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink, options, optionalCallback) {
    let client = this.client;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._listNext(nextPageLink, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._listNext(nextPageLink, options, optionalCallback);
    }
  }

}

module.exports = Clusters;
