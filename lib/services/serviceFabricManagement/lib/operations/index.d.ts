/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Clusters
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Clusters {


    /**
     * Update cluster configuration
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The parameters which contains the property value
     * and property name which used to update the cluster configuration
     *
     * @param {string} [parameters.reliabilityLevel] This level is used to set the
     * number of replicas of the system services. Possible values include:
     * 'Bronze', 'Silver', 'Gold'
     *
     * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
     * fabric upgrade is initiated automatically by the system or not. Possible
     * values include: 'Automatic', 'Manual'
     *
     * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
     * version, if set it, please make sure you have set upgradeMode to Manual,
     * otherwise ,it will fail, if you are using PUT new cluster, you can get the
     * version by using ClusterVersions_List, if you are updating existing cluster,
     * you can get the availableClusterVersions from Clusters_Get
     *
     * @param {object} [parameters.certificate] This primay certificate will be
     * used as cluster node to node security, SSL certificate for cluster
     * management endpoint and default admin client, the certificate should exist
     * in the virtual machine scale sets or Azure key vault, before you add it. It
     * will override original value
     *
     * @param {array} [parameters.clientCertificateThumbprints] The client
     * thumbprint details, it is used for client access for cluster operation, it
     * will override existing collection
     *
     * @param {array} [parameters.clientCertificateCommonNames] List of client
     * certificates to whitelist based on common names.
     *
     * @param {array} [parameters.fabricSettings] List of custom fabric settings to
     * configure the cluster, Note, it will overwrite existing collection
     *
     * @param {object} [parameters.reverseProxyCertificate] Certificate for the
     * reverse proxy
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {array} [parameters.nodeTypes] The list of nodetypes that make up the
     * cluster, it will override
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
     * Use the user defined upgrade policy or not
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
     * restart or not
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks, it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * length of time that health checks must pass continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * length of time that health checks can fail continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
     * timeout,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * timeout for any upgrade domain,it represents .Net TimeSpan
     *
     * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
     * Policy
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage per upgrade domain
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * Additional unhealthy applications percentage
     *
     * @param {object} [parameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Update cluster configuration
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The parameters which contains the property value
     * and property name which used to update the cluster configuration
     *
     * @param {string} [parameters.reliabilityLevel] This level is used to set the
     * number of replicas of the system services. Possible values include:
     * 'Bronze', 'Silver', 'Gold'
     *
     * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
     * fabric upgrade is initiated automatically by the system or not. Possible
     * values include: 'Automatic', 'Manual'
     *
     * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
     * version, if set it, please make sure you have set upgradeMode to Manual,
     * otherwise ,it will fail, if you are using PUT new cluster, you can get the
     * version by using ClusterVersions_List, if you are updating existing cluster,
     * you can get the availableClusterVersions from Clusters_Get
     *
     * @param {object} [parameters.certificate] This primay certificate will be
     * used as cluster node to node security, SSL certificate for cluster
     * management endpoint and default admin client, the certificate should exist
     * in the virtual machine scale sets or Azure key vault, before you add it. It
     * will override original value
     *
     * @param {array} [parameters.clientCertificateThumbprints] The client
     * thumbprint details, it is used for client access for cluster operation, it
     * will override existing collection
     *
     * @param {array} [parameters.clientCertificateCommonNames] List of client
     * certificates to whitelist based on common names.
     *
     * @param {array} [parameters.fabricSettings] List of custom fabric settings to
     * configure the cluster, Note, it will overwrite existing collection
     *
     * @param {object} [parameters.reverseProxyCertificate] Certificate for the
     * reverse proxy
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {array} [parameters.nodeTypes] The list of nodetypes that make up the
     * cluster, it will override
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
     * Use the user defined upgrade policy or not
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
     * restart or not
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks, it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * length of time that health checks must pass continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * length of time that health checks can fail continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
     * timeout,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * timeout for any upgrade domain,it represents .Net TimeSpan
     *
     * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
     * Policy
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage per upgrade domain
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * Additional unhealthy applications percentage
     *
     * @param {object} [parameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    update(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, callback: ServiceCallback<models.Cluster>): void;
    update(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Get cluster resource
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Get cluster resource
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    get(resourceGroupName: string, clusterName: string, callback: ServiceCallback<models.Cluster>): void;
    get(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Create cluster resource
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters Put Request
     *
     * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
     * version running in your cluster
     *
     * @param {object} [parameters.certificate] This primay certificate will be
     * used as cluster node to node security, SSL certificate for cluster
     * management endpoint and default admin client
     *
     * @param {string} [parameters.reliabilityLevel] Cluster reliability level
     * indicates replica set size of system service. Possible values include:
     * 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
     * fabric upgrade is initiated automatically by the system or not. Possible
     * values include: 'Automatic', 'Manual'
     *
     * @param {array} [parameters.clientCertificateThumbprints] The client
     * thumbprint details ,it is used for client access for cluster operation
     *
     * @param {array} [parameters.clientCertificateCommonNames]  List of client
     * certificates to whitelist based on common names
     *
     * @param {array} [parameters.fabricSettings] List of custom fabric settings to
     * configure the cluster.
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {string} parameters.managementEndpoint The http management endpoint
     * of the cluster
     *
     * @param {array} parameters.nodeTypes The list of nodetypes that make up the
     * cluster
     *
     * @param {object} [parameters.azureActiveDirectory] The settings to enable AAD
     * authentication on the cluster
     *
     * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
     * directory tenant id
     *
     * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
     * active directory cluster application id
     *
     * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
     * active directory client application id
     *
     * @param {string} [parameters.vmImage] The name of VM image VMSS has been
     * configured with. Generic names such as Windows or Linux can be used.
     *
     * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
     * diagnostics account configuration details
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.storageAccountName Diagnostics
     * storage account name
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName Protected
     * Diagnostics storage key name
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint
     * Diagnostics storage account blob endpoint
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint
     * Diagnostics storage account queue endpoint
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint
     * Diagnostics storage account table endpoint
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
     * Use the user defined upgrade policy or not
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
     * restart or not
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks, it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * length of time that health checks must pass continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * length of time that health checks can fail continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
     * timeout,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * timeout for any upgrade domain,it represents .Net TimeSpan
     *
     * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
     * Policy
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage per upgrade domain
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * Additional unhealthy applications percentage
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Create cluster resource
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters Put Request
     *
     * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
     * version running in your cluster
     *
     * @param {object} [parameters.certificate] This primay certificate will be
     * used as cluster node to node security, SSL certificate for cluster
     * management endpoint and default admin client
     *
     * @param {string} [parameters.reliabilityLevel] Cluster reliability level
     * indicates replica set size of system service. Possible values include:
     * 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
     * fabric upgrade is initiated automatically by the system or not. Possible
     * values include: 'Automatic', 'Manual'
     *
     * @param {array} [parameters.clientCertificateThumbprints] The client
     * thumbprint details ,it is used for client access for cluster operation
     *
     * @param {array} [parameters.clientCertificateCommonNames]  List of client
     * certificates to whitelist based on common names
     *
     * @param {array} [parameters.fabricSettings] List of custom fabric settings to
     * configure the cluster.
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {string} parameters.managementEndpoint The http management endpoint
     * of the cluster
     *
     * @param {array} parameters.nodeTypes The list of nodetypes that make up the
     * cluster
     *
     * @param {object} [parameters.azureActiveDirectory] The settings to enable AAD
     * authentication on the cluster
     *
     * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
     * directory tenant id
     *
     * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
     * active directory cluster application id
     *
     * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
     * active directory client application id
     *
     * @param {string} [parameters.vmImage] The name of VM image VMSS has been
     * configured with. Generic names such as Windows or Linux can be used.
     *
     * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
     * diagnostics account configuration details
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.storageAccountName Diagnostics
     * storage account name
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName Protected
     * Diagnostics storage key name
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint
     * Diagnostics storage account blob endpoint
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint
     * Diagnostics storage account queue endpoint
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint
     * Diagnostics storage account table endpoint
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
     * Use the user defined upgrade policy or not
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
     * restart or not
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks, it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * length of time that health checks must pass continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * length of time that health checks can fail continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
     * timeout,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * timeout for any upgrade domain,it represents .Net TimeSpan
     *
     * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
     * Policy
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage per upgrade domain
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * Additional unhealthy applications percentage
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(resourceGroupName: string, clusterName: string, parameters: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    create(resourceGroupName: string, clusterName: string, parameters: models.Cluster, callback: ServiceCallback<models.Cluster>): void;
    create(resourceGroupName: string, clusterName: string, parameters: models.Cluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Delete cluster resource
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * Delete cluster resource
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(resourceGroupName: string, clusterName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(resourceGroupName: string, clusterName: string, callback: ServiceCallback<void>): void;
    deleteMethod(resourceGroupName: string, clusterName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * List cluster resource by resource group
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupWithHttpOperationResponse(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * List cluster resource by resource group
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroup(resourceGroupName: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listByResourceGroup(resourceGroupName: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listByResourceGroup(resourceGroupName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * List cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * List cluster resource
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    list(callback: ServiceCallback<models.ClusterListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * Update cluster configuration
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The parameters which contains the property value
     * and property name which used to update the cluster configuration
     *
     * @param {string} [parameters.reliabilityLevel] This level is used to set the
     * number of replicas of the system services. Possible values include:
     * 'Bronze', 'Silver', 'Gold'
     *
     * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
     * fabric upgrade is initiated automatically by the system or not. Possible
     * values include: 'Automatic', 'Manual'
     *
     * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
     * version, if set it, please make sure you have set upgradeMode to Manual,
     * otherwise ,it will fail, if you are using PUT new cluster, you can get the
     * version by using ClusterVersions_List, if you are updating existing cluster,
     * you can get the availableClusterVersions from Clusters_Get
     *
     * @param {object} [parameters.certificate] This primay certificate will be
     * used as cluster node to node security, SSL certificate for cluster
     * management endpoint and default admin client, the certificate should exist
     * in the virtual machine scale sets or Azure key vault, before you add it. It
     * will override original value
     *
     * @param {array} [parameters.clientCertificateThumbprints] The client
     * thumbprint details, it is used for client access for cluster operation, it
     * will override existing collection
     *
     * @param {array} [parameters.clientCertificateCommonNames] List of client
     * certificates to whitelist based on common names.
     *
     * @param {array} [parameters.fabricSettings] List of custom fabric settings to
     * configure the cluster, Note, it will overwrite existing collection
     *
     * @param {object} [parameters.reverseProxyCertificate] Certificate for the
     * reverse proxy
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {array} [parameters.nodeTypes] The list of nodetypes that make up the
     * cluster, it will override
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
     * Use the user defined upgrade policy or not
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
     * restart or not
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks, it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * length of time that health checks must pass continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * length of time that health checks can fail continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
     * timeout,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * timeout for any upgrade domain,it represents .Net TimeSpan
     *
     * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
     * Policy
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage per upgrade domain
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * Additional unhealthy applications percentage
     *
     * @param {object} [parameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginUpdateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Update cluster configuration
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters The parameters which contains the property value
     * and property name which used to update the cluster configuration
     *
     * @param {string} [parameters.reliabilityLevel] This level is used to set the
     * number of replicas of the system services. Possible values include:
     * 'Bronze', 'Silver', 'Gold'
     *
     * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
     * fabric upgrade is initiated automatically by the system or not. Possible
     * values include: 'Automatic', 'Manual'
     *
     * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
     * version, if set it, please make sure you have set upgradeMode to Manual,
     * otherwise ,it will fail, if you are using PUT new cluster, you can get the
     * version by using ClusterVersions_List, if you are updating existing cluster,
     * you can get the availableClusterVersions from Clusters_Get
     *
     * @param {object} [parameters.certificate] This primay certificate will be
     * used as cluster node to node security, SSL certificate for cluster
     * management endpoint and default admin client, the certificate should exist
     * in the virtual machine scale sets or Azure key vault, before you add it. It
     * will override original value
     *
     * @param {array} [parameters.clientCertificateThumbprints] The client
     * thumbprint details, it is used for client access for cluster operation, it
     * will override existing collection
     *
     * @param {array} [parameters.clientCertificateCommonNames] List of client
     * certificates to whitelist based on common names.
     *
     * @param {array} [parameters.fabricSettings] List of custom fabric settings to
     * configure the cluster, Note, it will overwrite existing collection
     *
     * @param {object} [parameters.reverseProxyCertificate] Certificate for the
     * reverse proxy
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {array} [parameters.nodeTypes] The list of nodetypes that make up the
     * cluster, it will override
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
     * Use the user defined upgrade policy or not
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
     * restart or not
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks, it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * length of time that health checks must pass continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * length of time that health checks can fail continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
     * timeout,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * timeout for any upgrade domain,it represents .Net TimeSpan
     *
     * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
     * Policy
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage per upgrade domain
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * Additional unhealthy applications percentage
     *
     * @param {object} [parameters.tags] Cluster update parameters
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    beginUpdate(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, callback: ServiceCallback<models.Cluster>): void;
    beginUpdate(resourceGroupName: string, clusterName: string, parameters: models.ClusterUpdateParameters, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * Create cluster resource
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters Put Request
     *
     * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
     * version running in your cluster
     *
     * @param {object} [parameters.certificate] This primay certificate will be
     * used as cluster node to node security, SSL certificate for cluster
     * management endpoint and default admin client
     *
     * @param {string} [parameters.reliabilityLevel] Cluster reliability level
     * indicates replica set size of system service. Possible values include:
     * 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
     * fabric upgrade is initiated automatically by the system or not. Possible
     * values include: 'Automatic', 'Manual'
     *
     * @param {array} [parameters.clientCertificateThumbprints] The client
     * thumbprint details ,it is used for client access for cluster operation
     *
     * @param {array} [parameters.clientCertificateCommonNames]  List of client
     * certificates to whitelist based on common names
     *
     * @param {array} [parameters.fabricSettings] List of custom fabric settings to
     * configure the cluster.
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {string} parameters.managementEndpoint The http management endpoint
     * of the cluster
     *
     * @param {array} parameters.nodeTypes The list of nodetypes that make up the
     * cluster
     *
     * @param {object} [parameters.azureActiveDirectory] The settings to enable AAD
     * authentication on the cluster
     *
     * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
     * directory tenant id
     *
     * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
     * active directory cluster application id
     *
     * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
     * active directory client application id
     *
     * @param {string} [parameters.vmImage] The name of VM image VMSS has been
     * configured with. Generic names such as Windows or Linux can be used.
     *
     * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
     * diagnostics account configuration details
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.storageAccountName Diagnostics
     * storage account name
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName Protected
     * Diagnostics storage key name
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint
     * Diagnostics storage account blob endpoint
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint
     * Diagnostics storage account queue endpoint
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint
     * Diagnostics storage account table endpoint
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
     * Use the user defined upgrade policy or not
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
     * restart or not
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks, it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * length of time that health checks must pass continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * length of time that health checks can fail continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
     * timeout,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * timeout for any upgrade domain,it represents .Net TimeSpan
     *
     * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
     * Policy
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage per upgrade domain
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * Additional unhealthy applications percentage
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Cluster>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    beginCreateWithHttpOperationResponse(resourceGroupName: string, clusterName: string, parameters: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Cluster>>;

    /**
     * Create cluster resource
     *
     * @param {string} resourceGroupName The name of the resource group to which
     * the resource belongs or get created
     *
     * @param {string} clusterName The name of the cluster resource
     *
     * @param {object} parameters Put Request
     *
     * @param {string} [parameters.clusterCodeVersion] The ServiceFabric code
     * version running in your cluster
     *
     * @param {object} [parameters.certificate] This primay certificate will be
     * used as cluster node to node security, SSL certificate for cluster
     * management endpoint and default admin client
     *
     * @param {string} [parameters.reliabilityLevel] Cluster reliability level
     * indicates replica set size of system service. Possible values include:
     * 'Bronze', 'Silver', 'Gold', 'Platinum'
     *
     * @param {string} [parameters.upgradeMode] Cluster upgrade mode indicates if
     * fabric upgrade is initiated automatically by the system or not. Possible
     * values include: 'Automatic', 'Manual'
     *
     * @param {array} [parameters.clientCertificateThumbprints] The client
     * thumbprint details ,it is used for client access for cluster operation
     *
     * @param {array} [parameters.clientCertificateCommonNames]  List of client
     * certificates to whitelist based on common names
     *
     * @param {array} [parameters.fabricSettings] List of custom fabric settings to
     * configure the cluster.
     *
     * @param {object} [parameters.reverseProxyCertificate] The server certificate
     * used by reverse proxy
     *
     * @param {string} parameters.reverseProxyCertificate.thumbprint Thumbprint of
     * the primary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.thumbprintSecondary]
     * Thumbprint of the secondary certificate
     *
     * @param {string} [parameters.reverseProxyCertificate.x509StoreName] The local
     * certificate store location. Possible values include: 'AddressBook',
     * 'AuthRoot', 'CertificateAuthority', 'Disallowed', 'My', 'Root',
     * 'TrustedPeople', 'TrustedPublisher'
     *
     * @param {string} parameters.managementEndpoint The http management endpoint
     * of the cluster
     *
     * @param {array} parameters.nodeTypes The list of nodetypes that make up the
     * cluster
     *
     * @param {object} [parameters.azureActiveDirectory] The settings to enable AAD
     * authentication on the cluster
     *
     * @param {string} [parameters.azureActiveDirectory.tenantId] Azure active
     * directory tenant id
     *
     * @param {string} [parameters.azureActiveDirectory.clusterApplication] Azure
     * active directory cluster application id
     *
     * @param {string} [parameters.azureActiveDirectory.clientApplication] Azure
     * active directory client application id
     *
     * @param {string} [parameters.vmImage] The name of VM image VMSS has been
     * configured with. Generic names such as Windows or Linux can be used.
     *
     * @param {object} [parameters.diagnosticsStorageAccountConfig] The storage
     * diagnostics account configuration details
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.storageAccountName Diagnostics
     * storage account name
     *
     * @param {string}
     * parameters.diagnosticsStorageAccountConfig.protectedAccountKeyName Protected
     * Diagnostics storage key name
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.blobEndpoint
     * Diagnostics storage account blob endpoint
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.queueEndpoint
     * Diagnostics storage account queue endpoint
     *
     * @param {string} parameters.diagnosticsStorageAccountConfig.tableEndpoint
     * Diagnostics storage account table endpoint
     *
     * @param {object} [parameters.upgradeDescription] The policy to use when
     * upgrading the cluster.
     *
     * @param {boolean} [parameters.upgradeDescription.overrideUserUpgradePolicy]
     * Use the user defined upgrade policy or not
     *
     * @param {boolean} [parameters.upgradeDescription.forceRestart] Force node to
     * restart or not
     *
     * @param {string} parameters.upgradeDescription.upgradeReplicaSetCheckTimeout
     * Timeout for replica set upgrade to complete,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckWaitDuration The
     * length of time to wait after completing an upgrade domain before performing
     * health checks, it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckStableDuration The
     * length of time that health checks must pass continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.healthCheckRetryTimeout The
     * length of time that health checks can fail continuously,it represents .Net
     * TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeTimeout The upgrade
     * timeout,it represents .Net TimeSpan
     *
     * @param {string} parameters.upgradeDescription.upgradeDomainTimeout The
     * timeout for any upgrade domain,it represents .Net TimeSpan
     *
     * @param {object} parameters.upgradeDescription.healthPolicy Cluster health
     * Policy
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyNodes] The
     * maximum allowed percentage of unhealthy nodes before reporting an error. For
     * example, to allow 10% of nodes to be unhealthy, this value would be 10.
     *
     * @param {number}
     * [parameters.upgradeDescription.healthPolicy.maxPercentUnhealthyApplications]
     * The maximum allowed percentage of unhealthy applications before reporting an
     * error. For example, to allow 10% of applications to be unhealthy, this value
     * would be 10.
     *
     * @param {object} [parameters.upgradeDescription.deltaHealthPolicy] Delta
     * health policy
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentUpgradeDomainDeltaUnhealthyNodes
     * Additional unhealthy nodes percentage per upgrade domain
     *
     * @param {number}
     * parameters.upgradeDescription.deltaHealthPolicy.maxPercentDeltaUnhealthyApplications
     * Additional unhealthy applications percentage
     *
     * @param {string} parameters.location Resource location.
     *
     * @param {object} [parameters.tags] Resource tags.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Cluster} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Cluster} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Cluster} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    beginCreate(resourceGroupName: string, clusterName: string, parameters: models.Cluster, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Cluster>;
    beginCreate(resourceGroupName: string, clusterName: string, parameters: models.Cluster, callback: ServiceCallback<models.Cluster>): void;
    beginCreate(resourceGroupName: string, clusterName: string, parameters: models.Cluster, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Cluster>): void;


    /**
     * List cluster resource by resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listByResourceGroupNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * List cluster resource by resource group
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listByResourceGroupNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listByResourceGroupNext(nextPageLink: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listByResourceGroupNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;


    /**
     * List cluster resource
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterListResult>>;

    /**
     * List cluster resource
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ClusterListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterListResult>): void;
}

/**
 * @class
 * ClusterVersions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface ClusterVersions {


    /**
     * List cluster code versions by location
     *
     * @param {string} location The location for the cluster code versions, this is
     * different from cluster location
     *
     * @param {string} environment Cluster operating system, the default means all.
     * Possible values include: 'Default', 'Windows', 'Linux'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterCodeVersionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(location: string, environment: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterCodeVersionsListResult>>;

    /**
     * List cluster code versions by location
     *
     * @param {string} location The location for the cluster code versions, this is
     * different from cluster location
     *
     * @param {string} environment Cluster operating system, the default means all.
     * Possible values include: 'Default', 'Windows', 'Linux'
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterCodeVersionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterCodeVersionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterCodeVersionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(location: string, environment: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterCodeVersionsListResult>;
    list(location: string, environment: string, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
    list(location: string, environment: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;


    /**
     * List cluster code versions by location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ClusterCodeVersionsListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ClusterCodeVersionsListResult>>;

    /**
     * List cluster code versions by location
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ClusterCodeVersionsListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ClusterCodeVersionsListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ClusterCodeVersionsListResult} for more
     *                      information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ClusterCodeVersionsListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ClusterCodeVersionsListResult>): void;
}

/**
 * @class
 * Operations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ServiceFabricManagementClient.
 */
export interface Operations {


    /**
     * Lists all of the available ServiceFabric REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available ServiceFabric REST API operations.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    list(callback: ServiceCallback<models.OperationListResult>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;


    /**
     * Lists all of the available ServiceFabric REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<OperationListResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.OperationListResult>>;

    /**
     * Lists all of the available ServiceFabric REST API operations.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {OperationListResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {OperationListResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link OperationListResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    listNext(nextPageLink: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.OperationListResult>;
    listNext(nextPageLink: string, callback: ServiceCallback<models.OperationListResult>): void;
    listNext(nextPageLink: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OperationListResult>): void;
}
